export class NepaliDats {
  public static dates = [
    [2000, 31, 32, 31, 30, 31, 30, 30, 30, 29, 30, 29, 31], // Example data for the year 2000
    [2001, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30], // Example data for the year 2001
    //... more years
  ];

  // Method to get the number of days in a specific month of a specific year
  public static getDaysInMonth(year: number, month: number): number {
    // Validate the year range
    if (year < 2000 || year > this.dates[this.dates.length - 1][0]) {
      throw new Error("Year out of range");
    }

    // Validate the month range
    if (month < 1 || month > 12) {
      throw new Error("Month must be between 1 and 12");
    }

    // Adjusting month index to access the array correctly (arrays are 0-indexed)
    const monthIndex = month - 1;

    // Fetching the year data
    const yearData = this.dates.find(y => y[0] === year);

    // If year data exists, return the days in the specified month
    if (yearData) {
      return yearData[monthIndex + 1]; // +1 because the first element is the year
    } else {
      // If the year was not found in the data
      throw new Error("Year data not found");
    }
  }

  // Add the provided nepaliDates object here
  private static nepaliDates = {
    0: [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    1: [2001, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    2: [2002, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    3: [2003, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    4: [2004, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    5: [2005, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    6: [2006, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    7: [2007, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    8: [2008, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    9: [2009, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    10: [2010, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    11: [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    12: [2012, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    13: [2013, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    14: [2014, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    15: [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    16: [2016, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    17: [2017, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    18: [2018, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    19: [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    20: [2020, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    21: [2021, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    22: [2022, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    23: [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    24: [2024, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    25: [2025, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    26: [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    27: [2027, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    28: [2028, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    29: [2029, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    30: [2030, 31, 32, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    31: [2043, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    32: [2044, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    33: [2045, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    34: [2046, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    35: [2047, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    36: [2048, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    37: [2049, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    38: [2050, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    39: [2051, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    40: [2052, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    41: [2053, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    42: [2054, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    43: [2055, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    44: [2056, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    45: [2057, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    46: [2058, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    47: [2059, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    48: [2060, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    49: [2061, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    50: [2062, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    51: [2063, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    52: [2064, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    53: [2065, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    54: [2066, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    55: [2067, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    56: [2068, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    57: [2069, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    58: [2070, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    59: [2071, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    60: [2072, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    61: [2073, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
    62: [2074, 31, 31, 31, 32, 31, 30, 30, 30, 29, 30, 29, 30],
    63: [2075, 31, 31, 31, 31, 31, 30, 30, 30, 29, 30, 29, 30],
  };


  // Add other functions as needed
}
